# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doinga
#VAGRANT_EXPERIMENTAL="disks"

Vagrant.configure("2") do |config|
 config.vm.box = "centos/7"


 config.vm.provider :virtualbox do |v|
 v.memory = 1024
 v.cpus = 2
 
 end

# a# Define two VMs with static private IP addresses.
 boxes = [
 { 
	:name => "bak",
	:ip => "192.168.11.10",
 	},
 { 
	:name => "client",
	:ip => "192.168.11.150",
 	}
 ]

# # Provision each of the VMs.
 boxes.each do |opts|
	config.vm.define opts[:name] do |config|
 	config.vm.hostname = opts[:name]
 	config.vm.network "private_network", ip: opts[:ip]
	end
 end





config.vm.provision "ansible" do |ansible|
	ansible.playbook = "playbook.yml"
end



config.vm.define "bak" do |bak|
	bak.vm.provider "virtualbox" do |bak_vb|
			bak_vb.customize ["createhd",  "--filename", "machine1_disk2", "--size", "2048"]
			bak_vb.customize ["storagectl", :id, "--name", "SATA Controller", "--add", "sata"]
			bak_vb.customize ["storageattach", :id, "--storagectl", "SATA Controller", "--port", "3", "--type", "hdd", "--medium", "machine1_disk2.vdi"]
	

  end

	bak.vm.provision "shell",	
   	name: "configuration",
   	path: "init.sh"
end



config.vm.define "client" do |client|
 	client.vm.provision "shell",
 	name: "configuration",
 	path: "init-client.sh"
  end





end
